//
//	image sequence viewer
//	
//	cobranail@gmail.com
//	2008/12/13
//

// generated by Fast Light User Interface Designer (fluid) version 1.0109

#include "isv.h"
#include "queue.h"
#include <Magick++.h>
#include <iostream>
#include "imglist.h"
using namespace std;
using namespace Magick;
static bool playback=false,imagedatainit=false; 
Fl_Input		*filter;
Fl_File_Browser		*files;
Fl_File_Chooser		*fc; 
int gwidth=100,gheight=100; 
static int sframe=0,frames=0,cframe=0; 
double spf=0.01; 
uchar *rawimage=NULL; 
Fl_RGB_Image *rgb=NULL; 
TQHEAD * ghead=NULL; 

static void show_image(TQHEAD *head, int i) {
  if(rawimage!=NULL) delete rawimage;
if(rgb!=NULL) delete rgb;
imgFile *np,*np2;

		TAILQ_FOREACH(np, head, entries){
			if(np->qindex==i) {
				np2=np;
			}			
			//printf("index:%d,qindex:%d,file:%s\n",np->index,np->qindex,np->filename);
			
		}

frameinfo->label(np2->filename);
Image image( np2->filename ); 
    int w=image.columns();
    int h=image.rows();
    if(w>2048 || h> 1024) {
    	w/=2;h/=2;
    	image.zoom( Geometry(w,h) ); 
    }
	
	gwidth=w;
	gheight=h;

    rawimage=new uchar [4*w*h];

    uchar *p=rawimage;
    image.write(0,0,w,h,"RGBA",CharPixel,p);
    rgb = new Fl_RGB_Image(rawimage, gwidth, gheight,4);
    imagedatainit=true;
    imgview->image(rgb);
    imgview->redraw();
    frameinfo->redraw();
}

static void playbackseq(void *) {
  if(cframe<frames){
indicator->value(cframe);
show_image(ghead,cframe);
//viewframe(i);
cframe++;
}
if(cframe==frames){
 cframe=0;	 
}
Fl::repeat_timeout(spf, playbackseq);
}

Fl_Button *imgview=(Fl_Button *)0;

Fl_Value_Slider *indicator=(Fl_Value_Slider *)0;

static void cb_indicator(Fl_Value_Slider* o, TQHEAD* v) {
  cframe=o->value();
if(frames>0){

	show_image(v,o->value());

};
}

Fl_Button *setting=(Fl_Button *)0;

Fl_Button *pausebutton=(Fl_Button *)0;

static void cb_pausebutton(Fl_Button*, void*) {
  if(playback){
playback=false;
Fl::remove_timeout(playbackseq);	
};
}

Fl_Button *playbackbutton=(Fl_Button *)0;

static void cb_playbackbutton(Fl_Button*, void*) {
  if(!playback){
playback=true;
Fl::add_timeout(spf, playbackseq);
}
else {
playback=false;
Fl::remove_timeout(playbackseq);	
};
}

Fl_Button *filebutton=(Fl_Button *)0;

static void cb_filebutton(Fl_Button*, TQHEAD* v) {
  fc->show();
  while (fc->visible()) {
    Fl::wait();
  }
  if(fc->value()){

	frames=load_images(v,fc->value());
	imagedatainit=false;
        indicator->maximum(frames-1);
        indicator->redraw();
        show_image(v,0);
        

	//playbackimage(fc->value());

};
}

Fl_Box *frameinfo=(Fl_Box *)0;

int main(int argc, char **argv) {
  Fl_Double_Window* w;
  TQHEAD head =TAILQ_HEAD_INITIALIZER(head);

		TAILQ_INIT(&head);
		ghead=&head;
  Fl::scheme("gtk+");
fc = new Fl_File_Chooser(".", "*", Fl_File_Chooser::SINGLE, "Fl_File_Chooser Test");
  { Fl_Double_Window* o = new Fl_Double_Window(645, 323, "ISV 0.8");
    w = o;
    o->color((Fl_Color)33);
    o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    { Fl_Group* o = new Fl_Group(10, 0, 630, 320);
      { imgview = new Fl_Button(10, 0, 625, 260);
        imgview->box(FL_FLAT_BOX);
        imgview->color(FL_GRAY0);
        imgview->selection_color(FL_GRAY0);
        imgview->labeltype(FL_NORMAL_LABEL);
        imgview->labelfont(13);
        imgview->labelsize(14);
        imgview->labelcolor(FL_FOREGROUND_COLOR);
        imgview->align(FL_ALIGN_CENTER);
        imgview->when(FL_WHEN_RELEASE);
        Fl_Group::current()->resizable(imgview);
      } // Fl_Button* imgview
      { indicator = new Fl_Value_Slider(10, 265, 625, 20);
        indicator->type(1);
        indicator->box(FL_BORDER_BOX);
        indicator->color(FL_GRAY0);
        indicator->selection_color((Fl_Color)1);
        indicator->labelcolor((Fl_Color)55);
        indicator->maximum(100);
        indicator->step(1);
        indicator->textfont(13);
        indicator->textcolor(17);
        indicator->callback((Fl_Callback*)cb_indicator, (void*)(&head));
      } // Fl_Value_Slider* indicator
      { Fl_Group* o = new Fl_Group(35, 290, 560, 30);
        o->box(FL_GTK_DOWN_BOX);
        o->color((Fl_Color)34);
        o->selection_color((Fl_Color)34);
        { setting = new Fl_Button(365, 295, 105, 20, "@-2menu");
          setting->box(FL_GTK_UP_BOX);
          setting->down_box(FL_GTK_DOWN_BOX);
          setting->color((Fl_Color)37);
          setting->selection_color((Fl_Color)36);
          setting->labelcolor(FL_GRAY0);
        } // Fl_Button* setting
        { pausebutton = new Fl_Button(55, 295, 85, 20, "@-3square");
          pausebutton->box(FL_GTK_UP_BOX);
          pausebutton->down_box(FL_GTK_DOWN_BOX);
          pausebutton->color((Fl_Color)37);
          pausebutton->selection_color((Fl_Color)37);
          pausebutton->callback((Fl_Callback*)cb_pausebutton);
        } // Fl_Button* pausebutton
        { playbackbutton = new Fl_Button(140, 295, 180, 20, "@>");
          playbackbutton->box(FL_GTK_UP_BOX);
          playbackbutton->down_box(FL_GTK_DOWN_BOX);
          playbackbutton->color((Fl_Color)37);
          playbackbutton->selection_color((Fl_Color)37);
          playbackbutton->labelcolor(FL_GRAY0);
          playbackbutton->callback((Fl_Callback*)cb_playbackbutton);
        } // Fl_Button* playbackbutton
        { filebutton = new Fl_Button(470, 295, 110, 20, "@fileopen");
          filebutton->box(FL_GTK_UP_BOX);
          filebutton->down_box(FL_GTK_DOWN_BOX);
          filebutton->color((Fl_Color)37);
          filebutton->selection_color((Fl_Color)37);
          filebutton->labelcolor(FL_GRAY0);
          filebutton->callback((Fl_Callback*)cb_filebutton, (void*)(&head));
        } // Fl_Button* filebutton
        o->end();
      } // Fl_Group* o
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Group* o
    { frameinfo = new Fl_Box(10, 5, 625, 20, "frame info");
      frameinfo->color(FL_GRAY0);
      frameinfo->selection_color(FL_GRAY0);
      frameinfo->labelfont(13);
      frameinfo->labelsize(12);
      frameinfo->labelcolor(FL_BACKGROUND2_COLOR);
      frameinfo->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
    } // Fl_Box* frameinfo
    o->end();
  } // Fl_Double_Window* o
  w->show(argc, argv);
  return Fl::run();
}
